@import '~@angular/material/theming';

@mixin component-color($config-or-theme) {
  // Extract the color configuration in case a theme has been passed.
  // This allows consumers to either pass a theme object or a color configuration.
  $config: mat-get-color-config($config-or-theme);
  // Extract the palettes you need from the theme definition.
  $primary: map-get($config, primary);
  $accent: map-get($config, accent);
  $foreground: map-get($config, foreground);
  $background: map-get($config, background);

  .bg-primary-dark {
    background-color: mat-color($primary, 700);
    color: white;
  }
  .bg-primary {
    background-color: mat-color($primary);
    color: white;
  }

  .bg-card {
    background-color: mat-color($background, card);
  }

  .list-bg:nth-child(2n) {
    background-color: mat-color($foreground, text, 0.04);
  }
  .sub-card-background{
    background: mat-color($foreground, text, 0.04);
  }

  .ql-toolbar.ql-snow{
    background: lightgrey;
  }

  .ql-editor{
    font-size: 1.3em;
    color:  mat-color($foreground, text);
  }

  .ql-editor.ql-blank::before{
    color:  mat-color($foreground, text);
  }
}

@mixin component-theme($theme) {
  // Extracts the color from the theme.
  $color: mat-get-color-config($theme);

  // Do not generate styles if configurations for individual theming
  // systems have been explicitly set to `null`.
  @if $color !=null {
    @include component-color($color);
  }
}